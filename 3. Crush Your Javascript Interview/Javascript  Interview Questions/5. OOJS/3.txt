----------------------call(),apply() and bind()----------------------------------------
this=3  //javascript doesn't allowed to assign any value in "this" object.

function test(obj){
console.log(this);  //[object Window] 
}
let obj={
a:5
}
test(obj);

//obj pass kar rhe hai phie bhi window bta rha h, isiliye aaya h call().

--------------------------------Call()-----------------------------------------------
Call():-call() is used to change the reference or value of this object.
Syntax:-functionName.call(thisArg,arg1,arg2,.....argN)  //first argument hamesa this ko pass kiya jata h(first argument is always passed to this)

function test(a,b){
console.log(this);  //{ a: 5}
}
let obj={
a:5
}
test.call(obj,5,6);

---------------------------------------------------------------------------------
function test(){
console.log(this);  //50
}
let obj={
a:5
}
test.call(50); //ek argument hai isliye ye "this" ko pass kiya jayega

:- pahle "this" me value assign kr rhe the to nhi ho rha tha, lekin program me this ka value 50 hai

---------------------------------------------------------------------------------------------
function test(a,b){
console.log("this:- "+this,"a:- "+a,"b:- "+b);  //"this:- 50", "a:- 100", "b:- 200"
}
let obj={
a:5
}
test.call(50,100,200); //pahla argument "this" ko pass kiya jayega

---------------------------------------Apply()------------------------------------------------------
:-apply() is same as call(), it is also used for changing the reference of "this" object.
:- the difference is in terms of parameter passing.
:- we can pass only two parameter in apply():- first one is thisArgument,second is array.
Syntax:- functionName.apply(thisArg,[arg1,arg2,arg3,....argN])

function test(a,b,c){
console.log(this);  //  {a:5,b:10}
console.log(a,b,c);   //  5, 6 ,7
}
let obj={
a:5,
b:10
}
test.apply(obj,[5,6,7]); 

------------------------------------bind()----------------------------------------------
:- bind() is similar to call() but it doesn't call the function immediately,rather it returns a function, which you can later call that function.
:- bind() also allows you to change the value of this.
:- parameters are also similar to call().
:- difference between call() and bind() is call() change the reference of this and immediately calls the function where as bind() change the reference but it doesn't call the function immediately.

:-ye output nhi dega qki yaha immediate function call nhi hua h,ye jo function return kar rha hai,usko call karna padega
function test(a,b){
console.log(this);  //  no output
console.log(a,b);   //  no output
}
let obj={
a:5,
b:10
}
test.bind(obj,5,6); 

--------------------------------------------------------------
function test(a,b){
console.log(this);  //  {a:5,b:10}
console.log(a,b);   //  5,6
}
let obj={
a:5,
b:10
}
const funcExpression=test.bind(obj,5,6);
funcExpression();




Ques:- What is the difference between call(),apply(),and bind()?
:- call and apply take different way of parameters.
:- call and bind are similar,but bind doesn't execute the function immediately.