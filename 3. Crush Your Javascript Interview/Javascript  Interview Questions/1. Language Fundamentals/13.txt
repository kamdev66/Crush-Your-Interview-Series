----------------How do you Handle errors in javascript------------------
Ideally,when the program faces errors,even after validations,it should handle it & notify the user with proper error details like error number and description.

:-When you don't face any error at compile time,but at run time if you face any error then,you can use try...catch block.

Syntax of try...catch block:-
try{
    //statements
}
catch(err){
    //statements
}


without try...catch:-
let a=10;
console.log(`value of a is ${a}`); //"value of a is 10"
letb = 20;
console.log(`value of b is ${b}`); //Uncaught ReferenceError: b is not defined"

with try...catch:-

try{
let a=10;
console.log(`value of a is ${a}`);   //"value of a is 10"
letb = 20;
console.log(`value of b is ${b}`); 
}catch(err){  //here, err is the error object, it also has properties like name,message,stack
console.log("Error Found ");  //"Error Found "
console.log(err.name);       //"ReferenceError"
console.log(err.message);    //"b is not defined"
console.log(err.stack);      //"ReferenceError: b is not defined at https://------
}


--------------throw---------------------------
we can generate our own custom errors by using throw operator.

Syntax of throw operator:-
throw <error object> //here,the error object can be of classError,TypeError,SyntaxError etc.

let age=8;
let ageErr=new Error("Invalid Age");
try{
if(age < 18){
throw ageErr;
}else{
console.log("Valid Age");
}
}catch(err){
console.log(err.message)    //"Invalid Age", bcoz we passes message as Invalid age in line2
}


--------------------finally---------------------------------------

Syntax of finally block:-
try{
    //statements
}
catch(err){
    //statements
}finally{
    //statements
}  

or,
try{
    //statements
}finally{                      
    //statements            //code inside finally block is executed at the end & is always executed.
}  

:------------->>
try{
let a=10;
console.log(`value of a is ${a}`);   //"value of a is 10"
letb = 20;
console.log(`value of b is ${b}`); 
}catch(err){ 
console.log("Error Found ");     //"Error Found "
}finally{
console.log("Finally code");    //"Finally code"
}



Question:-When do you need try...catch?
:- try...catch is something which is handled at runtime,so when the code executed ;some portion of code needs to be managed properly so that program doesn't stop in between then you can use try...catch block.




