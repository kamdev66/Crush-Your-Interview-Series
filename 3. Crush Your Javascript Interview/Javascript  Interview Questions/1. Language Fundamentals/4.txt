--------------Rest and Spread Operator--------------------------
Rest Operator:-It puts the separate data values in one array
spread operator:- It spreads the array into separate data.

Rest:- ye  data ko array bna deta hai
function sum(a,...b){          //puts the separate data values in one array
console.log(a)   //5
console.log(b)  //[6, 7, 8]     //6,7,8 ek data tha jo ab array me hai
}
sum(5,6,7,8);


spread:- ye array ko separate data bna dega
let arr1=[1,2,3,4,5];
let arr2=[...arr1,6,7,8];  //here, 1,2,3,4,5 as a data aa rha h is array me
console.log(arr2)      //[1, 2, 3, 4, 5, 6, 7, 8]


-------------------Rest operator-----------------------
function sum(...nums){
console.log(nums);
}
sum(4,5);
sum(5,6,7,8);   output:- [4, 5]
                         [5, 6, 7, 8]

Note:- whenever you give rest parameter operator,it has to be the last parameter.
eg:- 
function sum(...a,b){     //it will give error

}
sum(4,5);
sum(5,6,7,8);            


eg:-
function sum(a,...b){   //it will not give error , it will work fine,bcoz here rest operator is the last parameter.

}
sum(4,5);
sum(5,6,7,8);    

eg:-
function sum(a,...b){          //puts the separate data values in one array
console.log(a)   //5
console.log(b)  //[6, 7, 8]
}
sum(5,6,7,8);


eg:- 
function sum(){
console.log(arguments)   //{0: 5, 1: 6, 2: 7, 3: 8},  here  we get the object but, with rest operator, we get the array
}
sum(5,6,7,8);


eg:-
if we use arrow function here, then it will give error,bcoz in arrow function, arguments will not work.
const sum=()=>{
console.log(arguments)   //ReferenceError: arguments is not defined
}
sum(5,6,7,8);


-----------------Spread operator-----------------------
:-As rest operator puts the separate data values in one array,the spread does exactly the opposite.

spread operator:- It spreads the array into separate data.
eg:- 
let arr1=[1,2,3,4,5];
let arr2=[...arr1,6,7,8];  //here,we separated the values of arr1 and passed in the arr2
console.log(arr2)      //[1, 2, 3, 4, 5, 6, 7, 8]



eg:- 
let arr1=[10,200,3000,40,5];
console.log(Math.max(arr1))     //NaN

let arr1=[10,200,3000,40,5];
console.log(Math.max(...arr1))   //3000  

what is the best way to create new arrays with assignment?
:- by spread operator
let arr1=[1,2,3,4,5];
let arr2=[...arr1,6,7,8];

//another method
arr1=arr2 is not preferrable bcoz arr1 and arr2 will be objects.