------------Generators----------------
:- Generators can help you to pause and resume the code.
:- Normally,when you write a function,it returns a single value.
:- You can think of generator as a kind of function which return multiple values in phases. 
:- The function* is the keyword used to define a generator function.
:- yield is an operator which pauses the generator.
:- yield also helps to receive input and send output.
:- next() method will start the execution till the yield operator.
:- next() method returns an object,which has two keys:-1.value  2. boolean(shows next status)

const genFunction=function* (){
  console.log("Hello");
  yield   //at this point the function will pause
  console.log("world");
  yield;
  console.log("And Galaxy");
}
const generatorObj=genFunction();
const o=generatorObj.next();  //Hello
console.log(o)   //{value: undefined, done: false}
generatorObj.next();   //world



const genFunction=function* (){
  console.log("Hello");
  yield   //at this point the function will pause
  console.log("world");
  yield;
  console.log("And Galaxy");
}
const generatorObj=genFunction();
generatorObj.next();
generatorObj.next();
generatorObj.next();     output:- Hello
                                  world
                                  And Galaxy




:-Explain all methods of generator object?
1.next():- It moves the function pointer to the next line from last suspended yield.
2.return():- it allows to terminate the generator function.
3.throw:- It can help you to raise an error with the generator object











