-------------------what is Promises-----------------------
:- When there are multilevel functions,it's a callback hell .
:- To avoid the callback hell, "Promise" object is invented.

Note:- When we create a promise,by default there is a pending state/pending status.
eg:-
let pr=new Promise((resolve,reject)=>{

})
console.log(pr)   //Promise{<pending>}
---------------------------------------
let pr=new Promise((resolve,reject)=>{
resolve();
})
console.log(pr)   //Promise{<resolved>}

---------------------------------------
let pr=new Promise((resolve,reject)=>{
reject();
})
console.log(pr)   //Promise{<rejected>}
-------------------------------------------------------------------
Note:- Sometimes we call promises are thenable,It means we can write chain of ".then"  statement.
:- we can deal with multiple asynchronus process with multiple ".then".
:- To deal with error handlers, we use catch.
:- .finally() will execute after all the other processes are executed.

let pr=new Promise((resolve,reject)=>{
setTimeout(()=>{
  resolve("Data");
},2000)
})
pr.then((msg)=>{
  console.log(msg)
}).catch((err)=>{
  console.log(err);
}).finally(()=>{
  console.log("Finishing process")
})

-------------------------------------------------------------------
Note:- when we convert our callback code into promises, then it is known as Promisification/promisifying/promisify.
-----------------------------------------------------------------------------------------

const cSqr=(a)=>{
  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      resolve(a*a);
    },2000);
  })
}
cSqr(3).then((res)=>{
  console.log(res);          //9
}).catch((err)=>{
  console.log("Error:- "+ err)
})

------------------------------------------------

function fetchData(){
  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      let data={pCode:1001,pName:"Apple"};
      resolve(data);
    },2000)
  })
}
console.log("Program strts here.......");
fetchData().then((data)=>{
  console.log(data);
}).catch((err)=>{
  console.log(err);
}).finally(()=>{
  console.log("program ends here......")
})

/*
Program strts here.......
{pCode: 1001, pName: "Apple"}
program ends here......
*/

----------------------------------------------------------
Note:- Every "then" should return a promise when you are chaining the promise with multiple processes.


Ques:- What is chaining the promise?Explain the syntax.
:- cSqr(2).then((res)=>{
    console.log(res);
    return cSqr;
}).then((res1)=>{
    console.log(res1);
})

----------------------output:---------------------------------------
const pr=new Promise((resolve,reject)=>{
  resolve("Over");
  setTimeout(()=>{
    resolve("Again");  //ye kabhi print nhi krega
  },2000)
})
pr.then((msg)=>{
  console.log(msg);
  return pr;
}).then((msg)=>{
  console.log(msg);
})

/*
output:-
Over
Over
*/
--------------------------------------------------------------
Ques:- What is the status of promise by default?
:- When the promise object is created,it has "pending status" by default.