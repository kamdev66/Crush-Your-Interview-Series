-----------Async/Await-----------------
:- aysnc/await is an easier way to deal with promises.
:- just like promise was an easier way to deal with callback.
:- aysnc/await handles promises but with simple syntax.
:-async written before a function,that means the function will always return a Promise.
:- we can use ".then" also with async function.

Note:- By default,any function without "return" statement returns "undefined" in javascript.
eg:-function test(){

}
const fn=test();
console.log(fn)   //undefined

-----------
async function test(){

}
const fn=test();
console.log(fn)   //Promise {<resolved>:undefined}

Note:- You do not need to write a "return" statement in async/await for asynchronus function.
async function test(){
return 0;
}
const fn=test();
console.log(fn)   //Promise {<resolved>:0}

--------------------------
:- if you want to deal with error in async/await,then we use "throw" keyword.
:- To return a "rejected" state,throw statement is written to reject a Promise.
async function test(){
throw new Error("Error Found");
}
const fn=test();
console.log(fn)   //Promise {<rejected>:Error:Error Found}

---------------------------
Ques:- How to write arrow function with async:-
const test=async()=>{
return 0;
}
const fn=test();
console.log(fn)   //Promise {<resolved>:0}

-------------------await()------------------------------
:- await() is used with async.it is only valid in async function.
:- await() makes sure to wait till a "Promise" is settled.be it resolved or rejected.

---------------------------------------------
Ques:- Can you write await without async?
:- No, it's not possible.

Ques:- Can you have an async IIFE?
:- Yes, any function can be async IIFE function.

Ques:- What is the best way to handle the errors with await?
:- we can use try...catch statements.

Ques:- Explain the syntax of Promise.all() with async/await?
syntax:-
async function getData(){
    const data=Promise.all([
        await fetch(API-URL1),
        await fetch(API-URL2)
    ])
}











