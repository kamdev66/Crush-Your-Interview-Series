------------Explain Promise.all() Vs. Promise.allSettled() Vs. Promise.race()--------------------

Promise.all():- When you have multiple promises as input it should return a single promise after all promises are resolved,Then we use Promise.all().
Syntax:-
Promise.all([promise1,promise2,....promiseN]).then(values)=>{
    //statements
}
-----------------------
const p1=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise1");
  },2000)
});
const p2=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise2");
  },2000)
});
const p3=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise3");
  },2000)
});
Promise.all([p1,p2,p3]).then((prMsgs)=>{
console.log(prMsgs); //after 2 sec, output is:- ["Promise1", "Promise2", "Promise3"]
})

Note:- Promise.all() method is settled with only resolved promises,so if any promise returns error then it won't work.
-----------------------------------
Promise.all() method will stop the execution if any promise returns error.
:-In this case, we use Promise.allSettled().

const p1=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise1");
  },2000)
});
const p2=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise2");
  },4000)
});
const p3=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    reject("Promise3");
  },2000)
});
Promise.all([p1,p2,p3]).then((prMsgs)=>{
console.log(prMsgs); 
}).catch((err)=>{
console.log("Error:-"+ err);      
})

/*
output:- 
"Error:-Promise3"
*/
--------------------Promise.allSettled()-----------------------
Promise.allSettled():-Promise.allSettled() method waits for all promises regardless of their state(resolve,reject) & returns Promise at the end.

const p1=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise1");
  },2000)
});
const p2=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise2");
  },2000)
});
const p3=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    reject("Promise3");
  },4000)
});
Promise.allSettled([p1,p2,p3]).then((prMsgs)=>{
console.log(prMsgs); 
}).catch((err)=>{
console.log("Error:-"+ err);      
})

/*
output:- gives output after 4 sec,bcoz of Promise3
[{
  status: "fulfilled",
  value: "Promise1"
}, {
  status: "fulfilled",
  value: "Promise2"
}, {
  reason: "Promise3",
  status: "rejected"
}]
*/

-----------------------Promise.race()-------------------------------
Promise.race():- Promise.race() method returns a promise as soon as any of the promise returns the state(resolve,reject) from the iterable list provided.

const p1=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise1");
  },2000)
});
const p2=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise2");
  },1000)
});
const p3=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    reject("Promise3");
  },4000)
});
Promise.race([p1,p2,p3]).then((prMsgs)=>{
console.log(prMsgs); 
}).catch((err)=>{
console.log("Error:-"+ err);      
})

/*
output:- gives output after 1 sec,bcoz of promise2 and stop execution
"Promise2"
*/



-----------------------------Questions-------------------------
Ques:- What will be the output if the iterable is not a promise inside all() method arguments?
:- It will not give any error,it simply prints the output.

const p1=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise1");
  },2000)
});
const p2="Promise2 is not iterable";
const p3=new Promise((resolve,reject)=>{
  setTimeout(()=>{
    resolve("Promise3");
  },4000)
});
Promise.all([p1,p2,p3]).then((prMsgs)=>{
console.log(prMsgs); 
}).catch((err)=>{
console.log("Error:-"+ err);      
})

/*
output:- gives output after 4 sec,bcoz of promise3.
["Promise1", "Promise2 is not iterable", "Promise3"]
*/


Ques:- How will you handle rejected multiple promise in the most efficient way?
:- If you use "Promise.all()" it will work for all the resolved states,but if there is an error then we use "Promise.allSettled()".


Ques:- What will be the output of empty iterable if given as a parameter inside the race() method as shown in this code?
:- empty means state will be pending forever.

const obj=Promise.race([]);
console.log(obj);
setTimeout(()=>{
console.log(obj)
},2000);
/*
output:-
Promise { <pending> }
Promise { <pending> }
*/







