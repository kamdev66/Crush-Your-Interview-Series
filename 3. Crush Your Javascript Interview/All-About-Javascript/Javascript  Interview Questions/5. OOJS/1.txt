---------------What is Object literal------------------
:- There are many ways to create an object in JS.
:- There is also a class "Object" which can allow you to create an object.
:- Different data pieces which you may want to pass a function or maybe to a server then you bundle those data pieces in an object and pass it.

:- Object Literal is a key:value pair data structure.

:--->>>>1st way:-

let obj={};  //created an object
obj.pCode=1001;
obj.pName="onePlus"
obj.getData=function(){
  console.log(obj.pCode,obj.pName);
}
console.log(obj);  //{pCode: 1001, pName: "onePlus", getD...}

:- In object, variable are known as properties and function are known as method.



:------->>>>>>2nd way:-
let obj={
  pCode:1001,
  pName:"Apple",
  getData:function(){
    console.log(obj.pCode,obj.pName);
  }
}
console.log(obj)         //{pCode: 1001, pName: "Apple", getDat...}


we can write like this also:-
let obj={
  pCode:1001,
  pName:"Apple",
  getData(){
    console.log(obj.pCode,obj.pName);
  }
}
console.log(obj)         //{pCode: 1001, pName: "Apple", getDat...}
obj.getData();         //1001 Apple



Note:- The diffeence between JSON and Object is JSON keeps their key inside double quotes and Object doesn't.


let tV="pCode";
let obj={
  tV:1001,
  pName:"Apple",
  getData(){
    console.log(obj.pCode,obj.pName);   //yaha par obj.tV rahega tab 1001 output dega nhi to undefined .
  }
}
console.log(obj)         //{tV: 1001, pName: "Apple", getData: ...}
obj.getData();  // undefined Apple



let tV="pCode";
let obj={
  [tV]:1001,         //qki yaha par hmne [] lga diya hai , isliye ye Obj.pCode samajh lega, mtlb iska actual keyName=pCode hai.[] means hum dynamic key de rhe hai 
  pName:"Apple",
  getData(){
    console.log(obj.pCode,obj.pName);
  }
}
console.log(obj)         //{tV: 1001, pName: "Apple", getData: ...}
obj.getData();  // 1001 Apple



Ques:- How can you add read-only properties to an object?
:-
const proto=Object.defineProperty({},'pCode',{
  writable:false,
  configurable:true,
  value:2001
})
const obj=Object.create(proto);
obj.pCode=3001;
console.log(obj.pCode);    //2001

If you have strict mode on, then it will give error.
------------------------------------------
const proto=Object.defineProperty({},'pCode',{
  writable:true,
  configurable:true,
  value:2001
})
const obj=Object.create(proto);
obj.pCode=3001;
console.log(obj.pCode);    //3001




-------------------------------------------------
let pCode=1001;
let pName="Apple";
let obj={
  pCode,
  pName
}
console.log(obj)  //{pCode: 1001, pName: "Apple"}

or,--------------------------both are same----------
let pCode=1001;
let pName="Apple";
let obj={
  pCode:pCode,
  pName:pName
}
console.log(obj)  //{pCode: 1001, pName: "Apple"}



---------------------------------------------------------------
let obj={a:"first"};
let obj1=obj;   //refereence is passing
obj1.a="second";
console.log(obj.a)   //second, bcoz reference of obj is passed to obj1

--------------------------------------------------------------
if we don't want to pass by reference,then we have to craete a clone or separate copy.
like this:-
let obj={a:"first"};
let obj1=Object.assign({},obj);   //making a copy of obj
obj1.a="second";
console.log(obj.a)   //first






