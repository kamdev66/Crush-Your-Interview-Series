TODO: what is currying function?
:- Currying is a function that takes one argument at a time and returns a new function expecting 
the next argument.It is also called nested function is ecmascript.


//Without currying
function calculateVolume(length, breadth, height) {
        return length * breadth * height;
}

//With Currying
function calculateVolume(length) {
        return function (breadth) {
            return function (height) {
                return length * breadth * height;
            }
        }
}

TODO: How to make a reactjs application faster?
:- we can use :-
   1. react lazy and react suspense
   2. memoize store
   3. avoid unnecessary build
   4. Keep state local as much as possible,don't put everything in global
   5. React fragments
   6. Derived state,don't overuse useState in most of the cases it can be derived from one states.


TODO: 
const obj={a:1, b: function(){
  alert(1);
}}
obj1=JSON.parse(JSON.stringify(obj));
console.log(obj1);  //{a: 1}

Note:- JSON.stringify() will ignore functions and the end object will not contain the property which
has the function.


TODO: 
var a=10;
if(true){
  var a=20;   //this will affect global scope
}
function simple(){
  var a=30;      //this will not affect the global scope bcoz var has function and global scope
  console.log(a) //30
}
simple();
console.log(a)  //20


TODO:
let a=10;
if(true){
  let a=20;   //this will not affect global scope bcoz let is block scoped
}
function simple(){
  let a=30;      //this will not affect the global scope bcoz let is  block scoped
  console.log(a) //30
}
simple();
console.log(a)  //10

TODO:
const a = 10;
if (true) {
  const a = 20; //this will not affect global scope bcoz let is block scoped
}
function simple() {
  const a = 30; //this will not affect the global scope bcoz let is  block scoped
  console.log(a); //30
}
simple();
console.log(a); //10
const can't be re-assigned or re-declared.
Note:- const should always have initial value 
eg:- const a; //it will give error

TODO:
we can modify const value in some cases:-
const c={name:'kamdev'};
c.name='Kamdev Kumar';   //it will not give error bcoz we are not re-assigning 'c' instead modifying the value inside it.
console.log(c);  //{name: "Kamdev Kumar"}

const d=['1','2']
d.push('Kamdev');
console.log(d);   //["1", "2", "Kamdev"]

c={name:'Dev'} //give error bcoz of re-assigning
d=['1','2','Kamdev']  //give error bcoz of re-assigning


TODO:
const a=10;
a=20; //gives error

const b={name:"DEV"}
b.name='Kamdev' //it will not give error

why??
:- when we try to re-assign 20 to a const variable 'a' we are trying to change memory reference.
but in the case of 'b', we are not directly re-assigning {memory reference will be same but only the value inside 'b' object has changed}

TODO:
let a=10;
let b=a;
Note:- when a primitive value assigned to another variable,it copies the actual value(here it is 10)
into 'b' variable ie. New memory will be created for 'b'

let a={a:10};
let b=a;
Note:- when a non-primitive value assigned to another variable,it copies the 'reference' instead of value
ie. both 'a' & 'b' are pointing to same memory location.

TODO:
Primitive Data Types in javascript:-
Number:represents numeric values
String:represents a sequence of characters.
Boolean:represents a logical value(true or false)
Null:which means no value
undefined:variable is declared,but assigned a value

Non-Primitive Data Types in javascript:-
Array:represents a list of values
Object:represents a collection of key-value pairs
Function:represents a block of reusable code.

TODO:






